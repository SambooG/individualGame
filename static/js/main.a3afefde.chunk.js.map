{"version":3,"sources":["gamepage.js","heading.js","App.js","serviceWorker.js","index.js"],"names":["GamePage","useState","score","updateScore","topScore","updateTopScore","alreadyClickedArray","updateAlreadyClickedArray","Pictures","randomPictures","updateRandomPictures","handleClick","e","id","includes","Math","max","push","array","i","length","j","floor","random","temp","shuffleArray","class","map","pictureObj","className","key","onClick","src","image","alt","heading","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8lEA6DeA,MA7Cf,WAAqB,IAAD,EACWC,mBAAS,GADpB,mBACXC,EADW,KACJC,EADI,OAEiBF,mBAAS,GAF1B,mBAEXG,EAFW,KAEDC,EAFC,OAGuCJ,mBAAS,IAHhD,mBAGXK,EAHW,KAGUC,EAHV,OAI6BN,mBAASO,GAJtC,mBAIXC,EAJW,KAIKC,EAJL,KAMlB,SAASC,EAAYC,EAAGC,GAECP,EAAoBQ,SAASD,IAIlDR,EAAeU,KAAKC,IAAId,EAAOE,IAE/BD,EAAY,GAEZI,EAA0B,MAG3BJ,EAAYD,EAAQ,GAEpBI,EAAoBW,KAAKJ,GACzBN,EAA0BD,IAI3BI,EAtCJ,SAAsBQ,GAEpB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIN,KAAKO,MAAMP,KAAKQ,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKG,EAEb,OAAON,EA8BgBO,CAAahB,IAGpC,OACE,6BACE,qCAAWP,GACX,wCAAcE,GACd,yBAAKsB,MAAM,YACVjB,EAAekB,KAAI,SAASC,GAC3B,OACE,4BAAQC,UAAU,YAAYC,IAAKF,EAAWf,GAAIkB,QAAS,SAACnB,GAAD,OAAOD,EAAYC,EAAGgB,EAAWf,MAC1F,yBAAKmB,IAAMJ,EAAWK,MAAOC,IAAKN,EAAWM,aC1C1CC,MARf,WACI,OAAO,yBAAKT,MAAM,WACN,2CACI,qECQLU,MATf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3afefde.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Pictures from \"./friends.json\"\n\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n\nfunction GamePage (){\n  const [score, updateScore] = useState(0);\n  const [topScore, updateTopScore] = useState(0);\n  const [alreadyClickedArray, updateAlreadyClickedArray] = useState([]);\n  const [randomPictures, updateRandomPictures] = useState(Pictures);\n\n  function handleClick(e, id) {\n    // see if it's been clicked\n    const hasBeenClicked = alreadyClickedArray.includes(id);\n    // if already clicked\n    if (hasBeenClicked) {\n      // make new top score if necessary Math.max();\n      updateTopScore(Math.max(score, topScore));\n      // reset score back to 0\n      updateScore(0);\n      // reset alreadyClicked to empty array\n      updateAlreadyClickedArray([]);\n    }else {\n      // put point on board \n     updateScore(score + 1);\n     // add id to the array\n     alreadyClickedArray.push(id)\n     updateAlreadyClickedArray(alreadyClickedArray);\n\n    }\n    // change to new one\n    updateRandomPictures(shuffleArray(randomPictures))\n  }\n\n  return (\n    <div>\n      <p>Score: {score}</p>\n      <p>TopScore: {topScore}</p>\n      <div class=\"gamepage\">\n      {randomPictures.map(function(pictureObj){\n        return (\n          <button className='picButton' key={pictureObj.id} onClick={(e) => handleClick(e, pictureObj.id)}>\n            <img src= {pictureObj.image} alt={pictureObj.alt} />\n          </button>\n        )\n      })}\n      </div>\n    </div>\n  )\n}\nexport default GamePage;","import React from \"react\";\nimport \"./index.css\";\n\nfunction heading() {\n    return <div class=\"heading\">\n                <h1>Click Pics!</h1>\n                    <h2>Click each photo only once or lose!</h2>\n            </div>\n            \n}\n\nexport default heading;","import React from 'react';\nimport './App.css';\nimport Gamepage from './gamepage'\nimport Heading from './heading';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Heading />\n      <Gamepage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}